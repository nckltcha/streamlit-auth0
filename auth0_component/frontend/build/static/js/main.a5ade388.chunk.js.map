{"version":3,"sources":["components/NavBar.js","utils/history.js","utils/initFontAwesome.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","onRun","domain","useAuth0","user","isAuthenticated","loginWithPopup","loginWithRedirect","logout","getAccessTokenSilently","getAccessTokenWithPopup","React","useState","access_token","setAccessToken","useEffect","access_token_options","audience","catch","then","token","className","Container","Button","color","onClick","err","console","log","returnTo","window","location","origin","createBrowserHistory","initFontAwesome","library","add","faLink","faUser","faPowerOff","_","require","App","clientId","providerConfig","redirectUri","useRefreshTokens","cacheLocation","isEqual","state","Streamlit","setComponentValue","setState","this","id","StreamlitComponentBase","withStreamlitConnection","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAqGeA,EAvFA,SAACC,GAEd,IAAMC,EAAQD,EAAK,MAAL,MACRE,EAASF,EAAK,MAAL,OAGf,EAQIG,cAPFC,EADF,EACEA,KACAC,EAFF,EAEEA,gBAEAC,GAJF,EAGEC,kBAHF,EAIED,gBACAE,EALF,EAKEA,OACAC,EANF,EAMEA,uBACAC,EAPF,EAOEA,wBAWF,EAAuCC,IAAMC,SAAS,MAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KAkCA,OA/BAH,IAAMI,WAAU,WAEd,IAAMC,EAAuB,CAC3BC,SAAS,WAAD,OAAaf,EAAb,aAoBNG,EAhBEQ,EACFZ,EAAMG,EAAMS,GAGZJ,EAAuBO,GACpBE,OAAM,WACL,OAAOR,EAAwBM,MAEhCG,MAAK,SAACC,GACHN,EAAeM,GACfnB,EAAMG,EAAMgB,MASpBnB,GAAM,EAAO,SAMf,yBAAKoB,UAAU,iBACb,kBAACC,EAAA,EAAD,CAAWD,UAAU,oBACjBhB,GACA,kBAACkB,EAAA,EAAD,CACEC,MAAM,UACNH,UAAU,aACVI,QAAS,WACPnB,EAAe,IAAIa,MAAK,WACtBlB,GAAM,EAAO,SACZiB,OAAM,SAACQ,GAAD,OAASC,QAAQC,IAAIF,QANlC,UAYDrB,GACC,kBAACkB,EAAA,EAAD,CACEE,QAAS,WA3DjBjB,EAAO,CACLqB,SAAUC,OAAOC,SAASC,WAyDtB,a,WCxFKC,c,+BCQAC,MANf,WACEC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KACZH,IAAQC,IAAIG,MCeVC,EAAIC,EAAQ,IAEhBP,I,IAEMQ,E,kDAEJ,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IAGRE,OAAS,EAAKF,MAAL,uBAJU,EAKnB2C,SAAW,EAAK3C,MAAL,yBALQ,EAOnB4C,eAAiB,CACfD,SAAU,EAAKA,SACfzC,OAAQ,EAAKA,OACbe,SAAS,WAAD,OAAa,EAAKf,OAAlB,YACR2C,YAAaf,OAAOC,SAASC,OAC7Bc,kBAAkB,EAClBC,cAAe,gBAbE,EAgBnB9C,MAAQ,SAACG,EAAMgB,GACRoB,EAAEQ,QAAQ5C,EAAM,EAAK6C,MAAM7C,QAC1BA,IAAMA,EAAI,MAAYgB,GAC1B8B,IAAUC,kBAAkB/C,GAC5B,EAAKgD,SAAS,CAAEhD,KAAMA,MAlBxB,EAAK6C,MAAQ,CAAE7C,KAAM,MAFJ,E,0CAwBnB,WACE,OACE,kBAAC,IAAkBiD,KAAKT,eACtB,yBAAKU,GAAG,OACN,kBAAC,EAAD,CAAQtD,MAAO,CAAEC,MAAOoD,KAAKpD,MAAOC,OAAQmD,KAAKT,eAAe1C,gB,GA9BxDqD,KAsCHC,cAAwBd,GCnDnBe,QACW,cAA7B3B,OAAOC,SAAS2B,UAEe,UAA7B5B,OAAOC,SAAS2B,UAEhB5B,OAAOC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.a5ade388.chunk.js","sourcesContent":["import React from \"react\"\n\n// styles\nimport \"./NavBar.css\"\n// eslint-disable-next-line\nimport {\n  Container,\n  Button,\n} from \"reactstrap\"\n\n\n// eslint-disable-next-line\nimport { useAuth0 } from \"@auth0/auth0-react\"\n\nconst NavBar = (props) => {\n\n  const onRun = props[\"props\"][\"onRun\"]\n  const domain = props[\"props\"][\"domain\"]\n\n  // eslint-disable-next-line\n  const {\n    user,\n    isAuthenticated,\n    loginWithRedirect,\n    loginWithPopup,\n    logout,\n    getAccessTokenSilently,\n    getAccessTokenWithPopup,\n  } = useAuth0()\n\n  const logoutWithRedirect = () =>\n    logout({\n      returnTo: window.location.origin,\n    })\n\n\n\n  // set react state for token\n  const [access_token, setAccessToken] = React.useState(null)\n\n  // useEffect to get the access token whenever the user changes / isAuthenticated\n  React.useEffect(() => {\n\n    const access_token_options = {\n      audience: `https://${domain}/api/v2/`,\n    }\n\n    const getAccessToken = () => {\n      if (access_token) {\n        onRun(user, access_token)\n      } else {\n        // try getting token silently, and return it, if it fails , try getting it with popup\n        getAccessTokenSilently(access_token_options)\n          .catch(() => {\n            return getAccessTokenWithPopup(access_token_options)\n          })\n          .then((token) => {\n              setAccessToken(token)\n              onRun(user, token)\n            },\n          )\n      }\n    }\n\n    if (isAuthenticated) {\n      getAccessToken()\n    } else {\n      onRun(false, null)\n    }\n  }, )\n\n\n  return (\n    <div className=\"nav-container\">\n      <Container className=\"login-component\">\n        {!isAuthenticated && (\n          <Button\n            color=\"primary\"\n            className=\"btn-margin\"\n            onClick={() => {\n              loginWithPopup({}).then(() => {\n                onRun(false, null)\n              }).catch((err) => console.log(err))\n            }}\n          >\n            Log in\n          </Button>\n        )}\n        {isAuthenticated && (\n          <Button\n            onClick={() => {\n              logoutWithRedirect()\n            }}\n          >Logout\n          </Button>\n        )}\n      </Container>\n    </div>\n  )\n}\n\nexport default NavBar\n\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faLink, faPowerOff, faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction initFontAwesome() {\n  library.add(faLink);\n  library.add(faUser);\n  library.add(faPowerOff);\n}\n\nexport default initFontAwesome;\n","import React from \"react\"\nimport { Router } from \"react-router-dom\"\nimport { Auth0Provider } from \"@auth0/auth0-react\"\nimport NavBar from \"./components/NavBar\"\nimport history from \"./utils/history\"\nimport {\n  Button,\n} from \"reactstrap\"\n\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\n// styles\nimport \"./App.css\"\n\n// fontawesome\nimport initFontAwesome from \"./utils/initFontAwesome\"\n\nvar _ = require(\"lodash\")\n\ninitFontAwesome()\n\nclass App extends StreamlitComponentBase {\n\n  constructor(props) {\n    super(props)\n    this.state = { user: null }\n  }\n  domain = this.props['args']['auth_setup']['domain']\n  clientId = this.props['args']['auth_setup']['clientId']\n\n  providerConfig = {\n    clientId: this.clientId,\n    domain: this.domain,\n    audience: `https://${this.domain}/api/v2/`,\n    redirectUri: window.location.origin,\n    useRefreshTokens: true,\n    cacheLocation: \"localstorage\",\n  }\n\n  onRun = (user, token) => {\n    if (!_.isEqual(user, this.state.user)) {\n      if (user) user['token'] = token\n      Streamlit.setComponentValue(user)\n      this.setState({ user: user })\n    }\n  }\n\n  render() {\n    return (\n      <Auth0Provider {...this.providerConfig}>\n        <div id=\"app\">\n          <NavBar props={{ onRun: this.onRun, domain: this.providerConfig.domain }} />\n        </div>\n      </Auth0Provider>\n    )\n  }\n}\n\n// export default App\nexport default withStreamlitConnection(App)\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}